//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace APIandModelLibrary
{
    using System.Runtime.Serialization;
    using System.ServiceModel;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileReprezentation", Namespace="http://schemas.datacontract.org/2004/07/APIandModelLibrary")]
    public partial class FileReprezentation : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int Idk__BackingFieldField;
        
        private string Pathk__BackingFieldField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Id>k__BackingField", IsRequired=true)]
        public int Idk__BackingField
        {
            get
            {
                return this.Idk__BackingFieldField;
            }
            set
            {
                this.Idk__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Path>k__BackingField", IsRequired=true)]
        public string Pathk__BackingField
        {
            get
            {
                return this.Pathk__BackingFieldField;
            }
            set
            {
                this.Pathk__BackingFieldField = value;
            }
        }

        public override string ToString()
        {
            return this.Pathk__BackingFieldField;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyReprezentation", Namespace="http://schemas.datacontract.org/2004/07/APIandModelLibrary")]
    public partial class PropertyReprezentation : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string Descriptionk__BackingFieldField;
        
        private int Id_photok__BackingFieldField;
        
        private int Idk__BackingFieldField;
        
        private string Titlek__BackingFieldField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Description>k__BackingField", IsRequired=true)]
        public string Descriptionk__BackingField
        {
            get
            {
                return this.Descriptionk__BackingFieldField;
            }
            set
            {
                this.Descriptionk__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Id_photo>k__BackingField", IsRequired=true)]
        public int Id_photok__BackingField
        {
            get
            {
                return this.Id_photok__BackingFieldField;
            }
            set
            {
                this.Id_photok__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Id>k__BackingField", IsRequired=true)]
        public int Idk__BackingField
        {
            get
            {
                return this.Idk__BackingFieldField;
            }
            set
            {
                this.Idk__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Title>k__BackingField", IsRequired=true)]
        public string Titlek__BackingField
        {
            get
            {
                return this.Titlek__BackingFieldField;
            }
            set
            {
                this.Titlek__BackingFieldField = value;
            }
        }

        public override string ToString()
        {
            return this.Titlek__BackingFieldField + " - " + this.Descriptionk__BackingFieldField;
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="InterfaceMyPhotosAPI")]
public interface InterfaceMyPhotosAPI
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/AddPhoto", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/AddPhotoResponse")]
    void AddPhoto(string path);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/AddPhoto", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/AddPhotoResponse")]
    System.Threading.Tasks.Task AddPhotoAsync(string path);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/AddProperty", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/AddPropertyResponse")]
    void AddProperty(int key_image, string title, string description);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/AddProperty", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/AddPropertyResponse")]
    System.Threading.Tasks.Task AddPropertyAsync(int key_image, string title, string description);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/DeletePhoto", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/DeletePhotoResponse")]
    void DeletePhoto(int key_image);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/DeletePhoto", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/DeletePhotoResponse")]
    System.Threading.Tasks.Task DeletePhotoAsync(int key_image);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/DeleteProperty", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/DeletePropertyResponse")]
    void DeleteProperty(int key_property);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/DeleteProperty", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/DeletePropertyResponse")]
    System.Threading.Tasks.Task DeletePropertyAsync(int key_property);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/GetPhotoNames", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/GetPhotoNamesResponse")]
    APIandModelLibrary.FileReprezentation[] GetPhotoNames();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/GetPhotoNames", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/GetPhotoNamesResponse")]
    System.Threading.Tasks.Task<APIandModelLibrary.FileReprezentation[]> GetPhotoNamesAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/GetPropertyForFile", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/GetPropertyForFileResponse")]
    APIandModelLibrary.PropertyReprezentation[] GetPropertyForFile(int id_file);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/GetPropertyForFile", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/GetPropertyForFileResponse")]
    System.Threading.Tasks.Task<APIandModelLibrary.PropertyReprezentation[]> GetPropertyForFileAsync(int id_file);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/OpenImage", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/OpenImageResponse")]
    void OpenImage(int key_image);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/OpenImage", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/OpenImageResponse")]
    System.Threading.Tasks.Task OpenImageAsync(int key_image);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/FileIsAvailable", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/FileIsAvailableResponse")]
    bool FileIsAvailable(int key_image);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/FileIsAvailable", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/FileIsAvailableResponse")]
    System.Threading.Tasks.Task<bool> FileIsAvailableAsync(int key_image);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/SearchFilesByDescription", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/SearchFilesByDescriptionResponse")]
    APIandModelLibrary.FileReprezentation[] SearchFilesByDescription(string title, string description);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/SearchFilesByDescription", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/SearchFilesByDescriptionResponse")]
    System.Threading.Tasks.Task<APIandModelLibrary.FileReprezentation[]> SearchFilesByDescriptionAsync(string title, string description);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/SearchFilesByType", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/SearchFilesByTypeResponse")]
    APIandModelLibrary.FileReprezentation[] SearchFilesByType(string title);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/SearchFilesByType", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/SearchFilesByTypeResponse")]
    System.Threading.Tasks.Task<APIandModelLibrary.FileReprezentation[]> SearchFilesByTypeAsync(string title);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface InterfaceMyPhotosAPIChannel : InterfaceMyPhotosAPI, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class InterfaceMyPhotosAPIClient : System.ServiceModel.ClientBase<InterfaceMyPhotosAPI>, InterfaceMyPhotosAPI
{
    
    public InterfaceMyPhotosAPIClient()
    {
    }
    
    public InterfaceMyPhotosAPIClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public InterfaceMyPhotosAPIClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public InterfaceMyPhotosAPIClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public InterfaceMyPhotosAPIClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void AddPhoto(string path)
    {
        base.Channel.AddPhoto(path);
    }
    
    public System.Threading.Tasks.Task AddPhotoAsync(string path)
    {
        return base.Channel.AddPhotoAsync(path);
    }
    
    public void AddProperty(int key_image, string title, string description)
    {
        base.Channel.AddProperty(key_image, title, description);
    }
    
    public System.Threading.Tasks.Task AddPropertyAsync(int key_image, string title, string description)
    {
        return base.Channel.AddPropertyAsync(key_image, title, description);
    }
    
    public void DeletePhoto(int key_image)
    {
        base.Channel.DeletePhoto(key_image);
    }
    
    public System.Threading.Tasks.Task DeletePhotoAsync(int key_image)
    {
        return base.Channel.DeletePhotoAsync(key_image);
    }
    
    public void DeleteProperty(int key_property)
    {
        base.Channel.DeleteProperty(key_property);
    }
    
    public System.Threading.Tasks.Task DeletePropertyAsync(int key_property)
    {
        return base.Channel.DeletePropertyAsync(key_property);
    }
    
    public APIandModelLibrary.FileReprezentation[] GetPhotoNames()
    {
        return base.Channel.GetPhotoNames();
    }
    
    public System.Threading.Tasks.Task<APIandModelLibrary.FileReprezentation[]> GetPhotoNamesAsync()
    {
        return base.Channel.GetPhotoNamesAsync();
    }
    
    public APIandModelLibrary.PropertyReprezentation[] GetPropertyForFile(int id_file)
    {
        return base.Channel.GetPropertyForFile(id_file);
    }
    
    public System.Threading.Tasks.Task<APIandModelLibrary.PropertyReprezentation[]> GetPropertyForFileAsync(int id_file)
    {
        return base.Channel.GetPropertyForFileAsync(id_file);
    }
    
    public void OpenImage(int key_image)
    {
        base.Channel.OpenImage(key_image);
    }
    
    public System.Threading.Tasks.Task OpenImageAsync(int key_image)
    {
        return base.Channel.OpenImageAsync(key_image);
    }
    
    public bool FileIsAvailable(int key_image)
    {
        return base.Channel.FileIsAvailable(key_image);
    }
    
    public System.Threading.Tasks.Task<bool> FileIsAvailableAsync(int key_image)
    {
        return base.Channel.FileIsAvailableAsync(key_image);
    }
    
    public APIandModelLibrary.FileReprezentation[] SearchFilesByDescription(string title, string description)
    {
        return base.Channel.SearchFilesByDescription(title, description);
    }
    
    public System.Threading.Tasks.Task<APIandModelLibrary.FileReprezentation[]> SearchFilesByDescriptionAsync(string title, string description)
    {
        return base.Channel.SearchFilesByDescriptionAsync(title, description);
    }
    
    public APIandModelLibrary.FileReprezentation[] SearchFilesByType(string title)
    {
        return base.Channel.SearchFilesByType(title);
    }
    
    public System.Threading.Tasks.Task<APIandModelLibrary.FileReprezentation[]> SearchFilesByTypeAsync(string title)
    {
        return base.Channel.SearchFilesByTypeAsync(title);
    }
}
