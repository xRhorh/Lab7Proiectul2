//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileReprezentation", Namespace="http://schemas.datacontract.org/2004/07/APIandModelLibrary")]
    public partial class FileReprezentation : object
    {
        
        private int Idk__BackingFieldField;
        
        private string Pathk__BackingFieldField;
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Id>k__BackingField", IsRequired=true)]
        public int Idk__BackingField
        {
            get
            {
                return this.Idk__BackingFieldField;
            }
            set
            {
                this.Idk__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Path>k__BackingField", IsRequired=true)]
        public string Pathk__BackingField
        {
            get
            {
                return this.Pathk__BackingFieldField;
            }
            set
            {
                this.Pathk__BackingFieldField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyReprezentation", Namespace="http://schemas.datacontract.org/2004/07/APIandModelLibrary")]
    public partial class PropertyReprezentation : object
    {
        
        private string Descriptionk__BackingFieldField;
        
        private int Id_photok__BackingFieldField;
        
        private int Idk__BackingFieldField;
        
        private string Titlek__BackingFieldField;
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Description>k__BackingField", IsRequired=true)]
        public string Descriptionk__BackingField
        {
            get
            {
                return this.Descriptionk__BackingFieldField;
            }
            set
            {
                this.Descriptionk__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Id_photo>k__BackingField", IsRequired=true)]
        public int Id_photok__BackingField
        {
            get
            {
                return this.Id_photok__BackingFieldField;
            }
            set
            {
                this.Id_photok__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Id>k__BackingField", IsRequired=true)]
        public int Idk__BackingField
        {
            get
            {
                return this.Idk__BackingFieldField;
            }
            set
            {
                this.Idk__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Title>k__BackingField", IsRequired=true)]
        public string Titlek__BackingField
        {
            get
            {
                return this.Titlek__BackingFieldField;
            }
            set
            {
                this.Titlek__BackingFieldField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.InterfaceMyPhotosAPI")]
    public interface InterfaceMyPhotosAPI
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/AddPhoto", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/AddPhotoResponse")]
        System.Threading.Tasks.Task AddPhotoAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/AddProperty", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/AddPropertyResponse")]
        System.Threading.Tasks.Task AddPropertyAsync(int key_image, string title, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/DeletePhoto", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/DeletePhotoResponse")]
        System.Threading.Tasks.Task DeletePhotoAsync(int key_image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/DeleteProperty", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/DeletePropertyResponse")]
        System.Threading.Tasks.Task DeletePropertyAsync(int key_property);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/GetPhotoNames", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/GetPhotoNamesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReference.FileReprezentation>> GetPhotoNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/GetPropertyForFile", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/GetPropertyForFileResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReference.PropertyReprezentation>> GetPropertyForFileAsync(int id_file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/OpenImage", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/OpenImageResponse")]
        System.Threading.Tasks.Task OpenImageAsync(int key_image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/FileIsAvailable", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/FileIsAvailableResponse")]
        System.Threading.Tasks.Task<bool> FileIsAvailableAsync(int key_image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/SearchFilesByDescription", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/SearchFilesByDescriptionResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReference.FileReprezentation>> SearchFilesByDescriptionAsync(string title, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/SearchFilesByType", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/SearchFilesByTypeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReference.FileReprezentation>> SearchFilesByTypeAsync(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMyPhotosAPI/GetAllProperties", ReplyAction="http://tempuri.org/InterfaceMyPhotosAPI/GetAllPropertiesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetAllPropertiesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface InterfaceMyPhotosAPIChannel : ServiceReference.InterfaceMyPhotosAPI, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class InterfaceMyPhotosAPIClient : System.ServiceModel.ClientBase<ServiceReference.InterfaceMyPhotosAPI>, ServiceReference.InterfaceMyPhotosAPI
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public InterfaceMyPhotosAPIClient() : 
                base(InterfaceMyPhotosAPIClient.GetDefaultBinding(), InterfaceMyPhotosAPIClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_InterfaceMyPhotosAPI.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public InterfaceMyPhotosAPIClient(EndpointConfiguration endpointConfiguration) : 
                base(InterfaceMyPhotosAPIClient.GetBindingForEndpoint(endpointConfiguration), InterfaceMyPhotosAPIClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public InterfaceMyPhotosAPIClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(InterfaceMyPhotosAPIClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public InterfaceMyPhotosAPIClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(InterfaceMyPhotosAPIClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public InterfaceMyPhotosAPIClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task AddPhotoAsync(string path)
        {
            return base.Channel.AddPhotoAsync(path);
        }
        
        public System.Threading.Tasks.Task AddPropertyAsync(int key_image, string title, string description)
        {
            return base.Channel.AddPropertyAsync(key_image, title, description);
        }
        
        public System.Threading.Tasks.Task DeletePhotoAsync(int key_image)
        {
            return base.Channel.DeletePhotoAsync(key_image);
        }
        
        public System.Threading.Tasks.Task DeletePropertyAsync(int key_property)
        {
            return base.Channel.DeletePropertyAsync(key_property);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReference.FileReprezentation>> GetPhotoNamesAsync()
        {
            return base.Channel.GetPhotoNamesAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReference.PropertyReprezentation>> GetPropertyForFileAsync(int id_file)
        {
            return base.Channel.GetPropertyForFileAsync(id_file);
        }
        
        public System.Threading.Tasks.Task OpenImageAsync(int key_image)
        {
            return base.Channel.OpenImageAsync(key_image);
        }
        
        public System.Threading.Tasks.Task<bool> FileIsAvailableAsync(int key_image)
        {
            return base.Channel.FileIsAvailableAsync(key_image);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReference.FileReprezentation>> SearchFilesByDescriptionAsync(string title, string description)
        {
            return base.Channel.SearchFilesByDescriptionAsync(title, description);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReference.FileReprezentation>> SearchFilesByTypeAsync(string title)
        {
            return base.Channel.SearchFilesByTypeAsync(title);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetAllPropertiesAsync()
        {
            return base.Channel.GetAllPropertiesAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_InterfaceMyPhotosAPI))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_InterfaceMyPhotosAPI))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8000/PC");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return InterfaceMyPhotosAPIClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_InterfaceMyPhotosAPI);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return InterfaceMyPhotosAPIClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_InterfaceMyPhotosAPI);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_InterfaceMyPhotosAPI,
        }
    }
}
